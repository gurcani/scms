#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar  9 16:39:27 2018

@author: ogurcan
"""

# Three term single chain model for En for any l and m smaller than 10

import numpy as np
import h5py as h5
import time
from scipy.stats import norm
import scipy.integrate as spi

L,M = 1,3  # l and m of interactions
V=0 # the variant nubmer. V=0 -> g=1.1837.. V=1 gives g=1.0633..
flname="out_scm3E"+str(L)+str(M)+".h5"

glm={(1, 3) : [[1.2106077944060871, 1.2851141121184841, 1.0, 1.0]],
 (2, 3) : [[1.150963925257758, 0.7038577213014764, -1.0, 1.0]],
 (1,4) : [[1.1837518185582039, 0.9093434523131968, 1.0, 1.0],
   [1.0633369388213871, 1.3352784434274105, -1.0, -1.0]],
 (3, 4) : [[1.1837518185582039, 0.5340577159726047, -1.0, 1.0]],
 (1,5) : [[1.150963925257758, 0.703857721301479, 1.0, 1.0],
   [1.0990003151464678, 1.7364596769548348, -1.0, 1.0]],
 (2,5) : [[1.0864636672176466, 0.8069402580443328, 1.0, 1.0],
   [1.16798953145259, 1.1614117489179339, -1.0, -1.0]],
 (3,5) : [[1.050366563478136, 0.42007091344199415, -1.0, 1.0],
   [1.1871121408520473, 4.896950260420603, -1.0, -1.0]],
 (4, 5) : [[1.1873801922006786, 0.43181262647613944, -1.0, 1.0]],
 (1,6) : [[1.1261126549716272, 0.574383688364187, 1.0, 1.0],
   [1.049846444091792, 1.4228690553300416, -1.0, 1.0],
   [1.0991749135060076, 1.147949783316235, 1.0, -1.0]],
 (5,6) : [[1.1822453664687318, 0.3632060119693818, -1.0, 1.0],
   [1.0328250425194594, 5.420015007233662, 1.0, -1.0]],
 (1,7) : [[1.1076910546772445, 0.48526743593709576, 1.0, 1.0],
   [1.0196052640734556, 1.206136337864837, -1.0, 1.0],
   [1.091953305766057, 0.9702078306440662, 1.0, -1.0],
   [1.063873229868349, 1.4542009132687184, 1.0, 1.0]],
 (2,7) : [[1.0959473280353451, 0.5325645717002842, 1.0, 1.0],
   [1.058327576641449, 0.7757874389600465, -1.0, -1.0],
   [1.1169628346689575, 1.3039798502420434, -1.0, 1.0]],
 (3,7) : [[1.0463417122903516, 0.5860597391041406, 1.0, 1.0],
   [1.1285487916728496, 0.8466892073528833, -1.0, -1.0],
   [1.0986794085492835, 4.837904936395672, -1.0, 1.0]],
 (4,7) : [[1.0251877414663186, 0.29962941439748114, -1.0, 1.0],
   [1.1433347687240127, 5.321512005354529, -1.0, -1.0],
   [1.0970745320271211, 5.05644848599108, 1.0, 1.0]],
 (5,7) : [[1.0833164583746338, 0.30342197938639953, -1.0, 1.0],
   [1.1617728283402255, 1.4336267479064375, 1.0, 1.0]],
 (6,7) : [[1.1744646511568155, 0.3138586801677834, -1.0, 1.0],
   [1.051752398992061, 5.548137891156655, 1.0, -1.0]],
 (1,8) : [[1.0837436962851708, 0.8401512473113432, 1.0, -1.0],
   [1.0662153970966735, 1.259751110797256, 1.0, 1.0],
   [1.039450704202674, 1.4632042693741538, -1.0, -1.0]],
 (3,8) : [[1.0624438948278234, 0.4961281209170117, 1.0, 1.0],
   [1.0923155017671724, 0.7139375387804955, -1.0, -1.0],
   [1.017924293366815, 4.585506680135404, -1.0, -1.0],
   [1.1092936344727018, 5.0688007969001205, -1.0, 1.0]],
 (5,8) : [[1.0395033590185487, 0.2629767827802023, -1.0, 1.0],
   [1.0965867476392661, 5.395480276819332, -1.0, -1.0],
   [1.133774354158482, 5.159848838128269, 1.0, 1.0]],
 (7,8) : [[1.1661535702393826, 0.2765967454531427, -1.0, 1.0],
   [1.0629556936680336, 5.642634041511402, 1.0, -1.0]],
 (1,9) : [[1.0761331340334555, 0.7408736431623434, 1.0, -1.0],
   [1.0644446506944802, 1.1110768472070334, 1.0, 1.0],
   [1.0220920033504048, 1.2918920194470802, -1.0, -1.0],
   [1.0469585420676237, 1.6607300000625713, -1.0, 1.0]],
 (2,9) : [[1.0800117522242525, 0.39672051056798935, 1.0, 1.0],
   [1.0128383986660294, 0.5866501453753208, -1.0, -1.0],
   [1.065548848738632, 0.9763936602035538, -1.0, 1.0],
   [1.0438060194527106, 0.7908089843277493, 1.0, -1.0]],
 (4,9) : [[1.0286898614900661, 0.459353427490662, 1.0, 1.0],
   [1.1027612381775596, 0.666515266485622, -1.0, -1.0],
   [1.0642156776129608, 5.146248368249077, -1.0, 1.0],
   [1.0886743478919594, 4.9490734595396155, 1.0, -1.0]],
 (5,9) : [[1.015113625119741, 0.2329121304270763, -1.0, 1.0],
   [1.112721525862176, 5.547144912882956, -1.0, -1.0],
   [1.0591044801022282, 5.3380458169106, 1.0, 1.0],
   [1.0927791972245386, 1.671948455238229, -1.0, 1.0]],
 (7,9) : [[1.0896638824518916, 0.23866414618907578, -1.0, 1.0],
   [1.0308546756546277, 1.169171377401609, 1.0, 1.0],
   [1.1422681802299286, 4.821985533135778, -1.0, -1.0]],
 (8,9) : [[1.1580869042861286, 0.2474299479121893, -1.0, 1.0],
   [1.0134055181746318, 0.9255677539169769, -1.0, 1.0],
   [1.0696246606626107, 5.715284523904313, 1.0, -1.0]]}
#sL=int(glm[(L,M)][V][2])
#sM=int(glm[(L,M)][V][3])
N=80                       # number of nodes
#nu=1.0e-23                  # kinematic viscosity.
nuL=1.0e1                  # kinematic viscosity.
t0=0.0                      # initial time
t1=200.0                   # final time
dt=1e-4;                     # time step for output.
dtout=1e-1;
wecontinue=False            # do we continue from an existing file.
n=np.arange(0,N)
g=glm[(L,M)][V][0]
alpha=glm[(L,M)][V][1]
k0=1.0
kn=k0*g**n
k=kn*np.exp(1j*alpha*n)
an=np.zeros(N)
bn=np.zeros(N)
cn=np.zeros(N)

an[:]=(g**(2*M)-g**(2*L)); an[N-L:]=0
bn[:]=(1-g**(2*M))
cn[:]=(g**(2*L)-1); cn[0:M-L]=0

Mn=g**(-L)*kn*np.sin((M-L)*alpha)

nu=100*kn[-4]**(-4)
Dn=nu*kn**4+nuL/kn**6

Nf=2
kf0=1.0j*2e3
kf=[k[np.argmin(np.abs(k-kf0))]]
for l in range(Nf-1):
    kf=np.append(kf,(k[~(np.isin(k,kf))])[np.argmin(np.abs(k[~(np.isin(k,kf))]-kf0))])
kf0=-1.0j*2e3
for l in range(Nf):
    kf=np.append(kf,(k[~(np.isin(k,kf))])[np.argmin(np.abs(k[~(np.isin(k,kf))]-kf0))])
fk=1e-2*np.float_(np.isin(k,kf))/Nf/20
#gk=fk.copy()

#fk=np.zeros(N)
#fk[50:58]=1e-1

dydt=np.zeros(N*2)
#av=int(np.round((-2*L+M)/3))
#av=0
#nm=n+av
eps=1e-30
def func(t,E):
#    dphidt=an*phi[n-3].conj()*phi[n-1]+bn*phi[n-2]*phi[(n+1)%N]+cn*phi[(n+2)%N]*phi[(n+3)%N].conj()-Dn*phi+fk
#    print(E)
    E[E<eps]=0
    tE=Mn*E[n%N]**(3/2)
#    tE=-Mn*(E[n-2]*np.exp(1j*th[n-2])*E[(n+1)%N]*np.exp(1j*th[(n+1)%N])*E[n]*np.exp(1j*th[n]))**(1/2)
#    tE=Mn*E[n-1]*np.sqrt(E[(n+1)%N])
#    tE[0:M-L]=0
#    tE[N-L:]=0
    dEdt=an*tE[(n+L)%N]+bn*tE[n]+cn*tE[n+L-M]-Dn*E+fk
    return dEdt

if(wecontinue==True):
    #setting up the output hdf5 file
    fl=h5.File(flname,"r")
    E=fl["fields/E"].value
    tt=fl["fields/t"].value
    fl.close()
    t0=tt[-1]
    E0=E[-1,:,:]
    fl=h5.File(flname,"w")
    grp=fl.create_group("fields")
    grp.create_dataset("k",data=k)
    grp.create_dataset("fk",data=fk)
    i=E.shape[0]
    grp=fl["fields"]
    Eres=grp.create_dataset("E",(i,N),maxshape=(None,N),dtype=float)
    tres=grp.create_dataset("t",(i,),maxshape=(None,),dtype=float)
    Eres[:,:]=E;
    tres[:]=tt;
else:
    E0=np.zeros(N)
    i=0;
    fl=h5.File(flname,"w")
    grp=fl.create_group("fields")
    grp.create_dataset("k",data=k)
    grp.create_dataset("fk",data=fk)
    Eres=grp.create_dataset("E",(1,N),maxshape=(None,N),dtype=float)
    tres=grp.create_dataset("t",(1,),maxshape=(None,),dtype=float)

#r=spi.RK45(func,t0,u0.view(dtype=float),t1,max_step=dt,atol=1e-12,rtol=1e-6)
r=spi.RK45(func,t0,E0,t1,max_step=dt,atol=1e-12,rtol=1e-6)

#r = ode(func, 0).set_integrator('dopri5',nsteps=1E6)
#r.set_initial_value(u0.view(dtype=float), t0)
ct=time.time()
epst=1e-12
while(r.status=='running'):
    print("t=",r.t);
    toldout=r.t
    while(r.t<np.round(toldout/dtout+1)*dtout-epst and r.status=='running'):
        told=r.t
        while(r.t<np.round(told/dt+1)*dt-epst and r.status=='running'):
            res=r.step()
    print(time.time()-ct,"seconds elapsed.")
    E=r.y;
    Eres.resize((i+1,N))
    tres.resize((i+1,))
    Eres[i,:]=E
    tres[i]=r.t
    fl.flush()
    i=i+1;
fl.close()
